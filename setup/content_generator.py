import os
import openai
from pathlib import Path
import nbformat as nbf

api_key = os.getenv('OPENAI_API_KEY')

if api_key is None:
    raise ValueError("No API key found. Please set the OPENAI_API_KEY environment variable.")

openai.api_key = api_key

def generate_tasks_and_questions(offer_content):
    prompt = f"""
    Based on the following job offer, generate 3 coding tasks and 10 technical questions that are relevant to the role described.

    Job Offer:
    {offer_content}

    Coding Tasks:
    1.
    2.
    3.

    Technical Questions:
    1.
    2.
    3.
    4.
    5.
    6.
    7.
    8.
    9.
    10.
    """

    response = openai.Completion.create(
        engine="text-davinci-003",
        prompt=prompt,
        max_tokens=1500
    )

    return response.choices[0].text.strip()

def create_jupyter_notebook(technical_questions, notebook_path):
    # Create a new Jupyter notebook
    nb = nbf.v4.new_notebook()

    # Add cells with technical questions and placeholders for answers
    cells = [nbf.v4.new_markdown_cell("# Technical Questions\n")]
    for i, question in enumerate(technical_questions, start=1):
        cells.append(nbf.v4.new_markdown_cell(f"### Question {i}\n{question}\n\n**Answer:**\n"))

    nb['cells'] = cells

    # Write the notebook to the specified file
    with notebook_path.open('w') as f:
        nbf.write(nb, f)

def create_readme(coding_tasks, readme_dir):
    readme_path = readme_dir / 'README.md'
    content = "# Coding Tasks\n\n"
    for i, task in enumerate(coding_tasks, start=1):
        content += f"## Task {i}\n{task}\n\n"

    readme_dir.mkdir(parents=True, exist_ok=True)
    with readme_path.open('w') as f:
        f.write(content)

def main():
    offers_dir = Path('./data/offers')
    output_dir = Path('./src/autogenerated_exercises')

    for offer_file in offers_dir.glob('*.txt'):
        with offer_file.open('r') as file:
            offer_content = file.read()

        result = generate_tasks_and_questions(offer_content)

        # Split the result into coding tasks and technical questions
        coding_tasks = []
        technical_questions = []
        lines = result.split('\n')
        is_coding = False
        is_technical = False

        for line in lines:
            if "Coding Tasks:" in line:
                is_coding = True
                is_technical = False
                continue
            if "Technical Questions:" in line:
                is_coding = False
                is_technical = True
                continue
            if is_coding and line.strip():
                coding_tasks.append(line.strip())
            if is_technical and line.strip():
                technical_questions.append(line.strip())

        # Create Jupyter Notebook
        notebook_path = output_dir / f"{offer_file.stem}_technical_questions.ipynb"
        create_jupyter_notebook(technical_questions, notebook_path)

        # Create README.md for each coding task
        for i, task in enumerate(coding_tasks, start=1):
            task_dir = output_dir / f"ex{i}"
            create_readme([task], task_dir)

        print(f"Generated tasks and questions for {offer_file.name}")

if __name__ == "__main__":
    main()
